<?php

/**
 * PluginsfAssetFolderTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sfDoctrineAssetsLibraryPlugin
 * @author     Massimiliano Arione
 * @author     Riccardo Bini
 * 
 */
class PluginsfAssetFolderTable extends Doctrine_Table
{
    /**
     * Retrieves folder by relative path
     *
     * @param string $path
     * @param string $separator
     * @return sfAssetFolder
     */
    public function retrieveByPath($path = '', $separator = DIRECTORY_SEPARATOR)
    {
      $path = $this->cleanPath($path, $separator);
      $query = $this->createQuery()->where('relative_path = ?', $path ? $path : null);
      
      return $query->fetchOne();
    }
    
    /**
     * Sanitize path
     *
     * @param  string $path
     * @param  string $separator
     * @return string
     */
    public function cleanPath($path, $separator = '/')
    {
      $path = trim($path, $separator);
      $root_name = sfConfig::get('app_sfAssetsLibrary_upload_dir', 'media');
      if (!$path)
      {
        $path = $root_name;
      }
      elseif (strpos($path, $root_name) !== 0)
      {
        $path = $root_name . $separator . $path;
      }
  
      return $path;
    }
    
    /**
     * Recursively creates parent folders
     *
     * @param string $path
     * @return sfAssetFolder
     */
    public function createFromPath($path)
    {
      $path = self::cleanPath($path, DIRECTORY_SEPARATOR);
      list($parent_path, $name) = sfAssetsLibraryTools::splitPath($path);
      if (!$parent_folder = $this->retrieveByPath($parent_path))
      {
        $parent_folder = $this->createFromPath($parent_path);
        $parent_folder->save();
      }
      $folder = new sfAssetFolder();
      $folder->setName($name);
      $folder->setRelativePath($path);
      $folder->getNode()->insertAsLastChildOf($parent_folder);
      $folder->save();
  
      return $folder;
    }
    
    public function getRoot() {
      return $this->getTree()->fetchRoot();
    }
    
  /**
   * Calculate total size of files
   * @param  array   $files
   * @return integer
   */
  public static function countFilesSize($files)
  {
    $totalSize = 0;
    foreach ($files as $file)
    {
      $totalSize += $file->getFilesize();
    }

    return $totalSize;
  }
  
  /**
   * @param  string   $folder
   * @return Doctrine_Query
   */
  public function getAllNonDescendantsPathsCriteria($folder)
  {
    $query = $this->createQuery();
    $query->where('lft < ?', $folder->getNode()->getLeftValue());
    $query->orWhere('rgt > ?', $folder->getNode()->getRightValue());
    
    return $query;
  }
  
   /**
    * get a criteria for all folders except one
    * @param  sfAssetFolder $folder folder to exclude
    * @return Doctrine_Query
    */
   public function getAllPathsButOneCriteria($folder)
   {
     $query = $this->createQuery()
       ->where('id != ?', $folder->getId());
     return $query;
   }
  
  /**
   * sort dirs by name
   * @param  array $dirs
   * @return array
   */
  public static function sortByName($dirs = array())
  {
    $sortedDirs = array();
    foreach ($dirs as $dir)
    {
      $key = strtolower($dir->getRelativePath());
      if (array_key_exists($key, $sortedDirs))
      {
        $key .= time();
      }
      $sortedDirs[$key] = $dir;
    }
    ksort($sortedDirs);

    return $sortedDirs;
  }

  /**
   * sort dirs by date
   * @param  array $dirs
   * @return array
   */
  public static function sortByDate($dirs = array())
  {
    $sortedDirs = array();
    foreach ($dirs as $dir)
    {
      $sortedDirs[$dir->getCreatedAt('U')] = $dir;
    }
    krsort($sortedDirs);

    return $sortedDirs;
  }
}